"use strict";(self.webpackChunkmostaza_documentation=self.webpackChunkmostaza_documentation||[]).push([[3836],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return d}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=l(t),d=a,f=m["".concat(c,".").concat(d)]||m[d]||p[d]||i;return t?r.createElement(f,s(s({ref:n},u),{},{components:t})):r.createElement(f,s({ref:n},u))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,s=new Array(i);s[0]=m;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var l=2;l<i;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3752:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return p}});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),s=["components"],o={sidebar_position:3},c="Integrazione con il Mostaza Mail Sender Client",l={unversionedId:"strapi/mostaza-email-service",id:"strapi/mostaza-email-service",title:"Integrazione con il Mostaza Mail Sender Client",description:"Per utilizzare il client per inviare email per il recupero della password, \xe8 necessario installare il package ms-mail-sender-client e creare il file strapi-server.js nella cartella src/extensions/users-permissions/ con il seguente codice:",source:"@site/docs/strapi/mostaza-email-service.md",sourceDirName:"strapi",slug:"/strapi/mostaza-email-service",permalink:"/mostaza-documentation-docusaurus/docs/strapi/mostaza-email-service",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/strapi/mostaza-email-service.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"defaultSidebar",previous:{title:"Creazione di endpoint custom",permalink:"/mostaza-documentation-docusaurus/docs/strapi/custom-endpoint"},next:{title:"Tutorial Intro",permalink:"/mostaza-documentation-docusaurus/docs/docusaurus-tutorial/intro"}},u={},p=[],m={toc:p};function d(e){var n=e.components,t=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"integrazione-con-il-mostaza-mail-sender-client"},"Integrazione con il Mostaza Mail Sender Client"),(0,i.kt)("p",null,"Per utilizzare il client per inviare email per il recupero della password, \xe8 necessario installare il package ",(0,i.kt)("inlineCode",{parentName:"p"},"ms-mail-sender-client")," e creare il file ",(0,i.kt)("inlineCode",{parentName:"p"},"strapi-server.js")," nella cartella ",(0,i.kt)("inlineCode",{parentName:"p"},"src/extensions/users-permissions/")," con il seguente codice:"),(0,i.kt)("p",null,"NB: questo codice \xe8 stato creato appositamente per il progetto ServiceKey, pertanto \xe8 necessario adattarlo al progetto per il quale si sta lavorando. I file importati possono essere recuperati dalla repository ",(0,i.kt)("strong",{parentName:"p"},"servicekey-backend"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const { formatUserResponse } = require("../../utils/formatResponses");\nconst { getQueryVariable } = require("../../utils/queries");\nconst crypto = require("crypto");\nconst utils = require("@strapi/utils");\nconst { sanitize } = utils;\nconst { ApplicationError, ValidationError } = utils.errors;\nconst { getService } = require("../../utils/getService");\nconst { sendMail } = require("ms-mail-sender-client");\nconst { config } = require("./../../../config/mostazaServices");\nconst { getEmailDomain, generatePassword } = require("../../utils/others");\n\nmodule.exports = (plugin) => {\n  const emailRegExp =\n    /^(([^<>()\\[\\]\\\\.,;:\\s@"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@"]+)\\*)|(".+"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n  const sanitizeUser = (user, ctx) => {\n    const { auth } = ctx.state;\n    const userSchema = strapi.getModel("plugin::users-permissions.user");\n\n    plugin.controllers.auth.forgotPassword = async (ctx) => {\n      let { email } = ctx.request.body;\n\n      // Check if the provided email is valid or not.\n      const isEmail = emailRegExp.test(email);\n\n      if (isEmail) {\n        email = email.toLowerCase();\n      } else {\n        throw new ValidationError("Please provide a valid email address");\n      }\n\n      const pluginStore = await strapi.store({\n        type: "plugin",\n        name: "users-permissions",\n      });\n\n      // Find the user by email.\n      let user = await strapi\n        .query("plugin::users-permissions.user")\n        .findOne({ where: { email: email.toLowerCase() } });\n\n      // User not found.\n      if (!user) {\n        // Check if the provided email belongs to a CompanyDomain\n        const domain = await strapi\n          .query("api::company-domain.company-domain")\n          .findOne({\n            where: { domain: getEmailDomain(email.toLowerCase()) },\n            populate: { company: true },\n          });\n\n        if (!domain) throw new ApplicationError("This email does not exist");\n        else {\n          //If the email\'s domain is in the DB, create a new user\n          user = await strapi.query("plugin::users-permissions.user").create({\n            data: {\n              username: email,\n              email,\n              company: domain.company.id,\n              password: generatePassword(),\n              role: 1,\n              provider: "local",\n            },\n          });\n        }\n      }\n\n      // User blocked\n      if (user.blocked) {\n        throw new ApplicationError("This user is disabled");\n      }\n\n      // Generate random token.\n      const resetPasswordToken = crypto.randomBytes(64).toString("hex");\n\n      const settings = await pluginStore\n        .get({ key: "email" })\n        .then((storeEmail) => {\n          try {\n            return storeEmail["reset_password"].options;\n          } catch (error) {\n            return {};\n          }\n        });\n\n      const advanced = await pluginStore.get({\n        key: "advanced",\n      });\n\n      const userInfo = await sanitizeUser(user, ctx);\n\n      settings.message = await getService("users-permissions").template(\n        settings.message,\n        {\n          URL: advanced.email_reset_password,\n          USER: userInfo,\n          TOKEN: resetPasswordToken,\n        }\n      );\n\n      settings.object = await getService("users-permissions").template(\n        settings.object,\n        {\n          USER: userInfo,\n        }\n      );\n\n      try {\n        // Send an email to the user.\n        const response = await sendMail(\n          {\n            apiToken: config.MOSTAZA_SERVICES_APITOKEN,\n            service: "MANDRILL",\n            tenant: config.TENANT,\n            useTestAccount: config.USE_TEST_ACCOUNT,\n          },\n          {\n            from: settings.from.email,\n            subject: settings.object,\n            to: [user.email],\n            fromName: settings.from.name,\n            html: settings.message,\n          }\n        );\n      } catch (err) {\n        console.log(err);\n        throw new ApplicationError(err.message);\n      }\n\n      // Update the user.\n      await strapi\n        .query("plugin::users-permissions.user")\n        .update({ where: { id: user.id }, data: { resetPasswordToken } });\n\n      ctx.send({ ok: true });\n    };\n\n    return plugin;\n  };\n};\n')))}d.isMDXComponent=!0}}]);